{"version":3,"sources":["Components/useQuery/fetchURL.js","Components/App/ColumnFilter.js","Components/App/Columns.js","Components/App/GlobalFilter.js","Components/App/FilteringTable.js","Components/App/Main.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["fetchURL","a","queryKey","id","fetch","res","json","ColumnFilter","column","filterValue","setFilter","value","onChange","e","target","COLUMNS","Header","Footer","accessor","disableFilters","Cell","format","Date","GlobalFilter","filter","useState","setValue","useAsyncDebounce","undefined","FilteringTable","columns","useMemo","data","MOCK_DATA","defaultColumn","Filter","useTable","useFilters","useGlobalFilter","getTableProps","getTableBodyProps","headerGroups","footerGroups","rows","prepareRow","state","setGlobalFilter","globalFilter","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","row","getRowProps","cells","cell","getCellProps","footerGroup","getFooterGroupProps","getFooterProps","Main","playersURL","teamURL","playerList","useQuery","className","playerPlayer","indexPlayer","first_name","last_name","queryClient","QueryClient","App","QueryClientProvider","client","initialIsOpen","position","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"8xlCAMiBA,EANH,uCAAG,mCAAAC,EAAA,6DAAQC,EAAR,EAAQA,SAAR,cACGA,EADH,GACHC,EADG,cAEKC,MAAM,GAAD,OAAID,IAFd,cAEPE,EAFO,yBAGNA,EAAIC,QAHE,2CAAH,sD,qCCeCC,EAbM,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACdC,EAA2BD,EAA3BC,YAAaC,EAAcF,EAAdE,UACrB,OACE,4CACW,GACT,uBACEC,MAAOF,GAAe,GACtBG,SAAU,SAACC,GAAD,OAAOH,EAAUG,EAAEC,OAAOH,cCN/BI,EAAU,CACrB,CACEC,OAAQ,KACRC,OAAQ,KACRC,SAAU,KAEVC,gBAAgB,GAElB,CACEH,OAAQ,aACRC,OAAQ,aACRC,SAAU,cAGZ,CACEF,OAAQ,YACRC,OAAQ,YACRC,SAAU,aAGZ,CACEF,OAAQ,gBACRC,OAAQ,gBACRC,SAAU,gBACVE,KAAM,YAAgB,IAAbT,EAAY,EAAZA,MACP,OAAOU,YAAO,IAAIC,KAAKX,GAAQ,gBAInC,CACEK,OAAQ,UACRC,OAAQ,UACRC,SAAU,WAGZ,CACEF,OAAQ,eACRC,OAAQ,eACRC,SAAU,UCjBCK,EApBM,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,OAAQd,EAAe,EAAfA,UAC3B,EAA0Be,mBAASD,GAAnC,mBAAOb,EAAP,KAAce,EAAd,KACMd,EAAWe,4BAAiB,SAAAhB,GAC9BD,EAAUC,QAASiB,KACpB,KAEH,OACI,4CACa,GACT,uBAAOjB,MAAOA,GAAS,GACvBC,SAAU,SAACC,GAEPa,EAASb,EAAEC,OAAOH,OAClBC,EAASC,EAAEC,OAAOH,cCyDnBkB,EAjEQ,WACrB,IAAMC,EAAUC,mBAAQ,kBAAMhB,IAAS,IACjCiB,EAAOD,mBAAQ,kBAAME,IAAW,IAChCC,EAAgBH,mBAAQ,WAC5B,MAAO,CAACI,OAAQ5B,KACf,IAEH,EASI6B,mBAAS,CACXN,UACAE,OACAE,iBACCG,aAAYC,mBAZbC,EADF,EACEA,cACAC,EAFF,EAEEA,kBACAC,EAHF,EAGEA,aACAC,EAJF,EAIEA,aACAC,EALF,EAKEA,KACAC,EANF,EAMEA,WACAC,EAPF,EAOEA,MACAC,EARF,EAQEA,gBAOMC,EAAgBF,EAAhBE,aAER,OACI,qCACA,cAAC,EAAD,CAAcvB,OAAQuB,EAAcrC,UAAWoC,IACjD,kDAAWP,KAAX,IAA4BpC,GAAG,QAA/B,UACE,gCACGsC,EAAaO,KAAI,SAACC,GAAD,OAChB,8CAAQA,EAAYC,uBAApB,aACGD,EAAYE,QAAQH,KAAI,SAACxC,GAAD,OACvB,+CAAQA,EAAO4C,kBAAf,cAAkC5C,EAAO6C,OAAO,UAChD,8BAAM7C,EAAO8C,UAAY9C,EAAO6C,OAAO,UAAY,sBAM3D,iDAAWb,KAAX,aACGG,EAAKK,KAAI,SAACO,GAET,OADAX,EAAWW,GAET,8CAAQA,EAAIC,eAAZ,aACGD,EAAIE,MAAMT,KAAI,SAACU,GACd,OAAO,+CAAQA,EAAKC,gBAAb,kBAA+BD,EAAKL,OAAO,wBAM5D,gCACGX,EAAaM,KAAI,SAACY,GAAD,OAChB,8CAAQA,EAAYC,uBAApB,aACGD,EAAYT,QAAQH,KAAI,SAACxC,GAAD,OACvB,8CAAQA,EAAOsD,gBAAf,aAAgCtD,EAAO6C,OAAO,gCCxB7CU,EA5BF,WACX,MAAoCtC,mBAClC,6CADF,mBAAOuC,EAAP,KAGA,GAHA,KAG8BvC,mBAC5B,4CADF,mBAAOwC,EAAP,KAGMC,GAHN,KAGmBC,YAAS,CAAC,UAAD,UAAeH,IAAehE,IACzCmE,YAAS,CAAC,WAAD,UAAgBF,IAAYjE,GAEtD,OACE,qCACA,cAAC,EAAD,IAGGkE,EAAWlC,MACV,sBAAKoC,UAAU,aAAf,UACGF,EAAWlC,KAAKA,KAAKgB,KAAI,SAACqB,EAAcC,GAAf,OACxB,yCACSD,EAAaE,WADtB,IACmCF,EAAaG,YADtCF,MAGR,W,QCzBRG,EAAc,IAAIC,IAYTC,EAVH,WACV,OAEE,eAACC,EAAA,EAAD,CAAqBC,OAAQJ,EAA7B,UACI,cAAC,EAAD,IACF,cAAC,qBAAD,CAAoBK,eAAe,EAAOC,SAAU,qBCH3CC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASpC,OACP,cAAC,IAAMqC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5385e55c.chunk.js","sourcesContent":["const fetchURL = async ({queryKey}) => {\n    const [ , id] = queryKey;\n    const res = await fetch(`${id}`);\n    return res.json();\n  };\n\n  export default fetchURL;","import React from \"react\";\n\nconst ColumnFilter = ({ column }) => {\n  const { filterValue, setFilter } = column;\n  return (\n    <span>\n      Search: {\"\"}\n      <input\n        value={filterValue || \"\"}\n        onChange={(e) => setFilter(e.target.value)}\n      />\n    </span>\n  );\n};\n\nexport default ColumnFilter;\n","import { format } from \"date-fns\";\nimport ColumnFilter from \"./ColumnFilter\";\n\nexport const COLUMNS = [\n  {\n    Header: \"Id\",\n    Footer: \"Id\",\n    accessor: \"id\",\n//     Filter: ColumnFilter,\n    disableFilters: true,\n  },\n  {\n    Header: \"First Name\",\n    Footer: \"First Name\",\n    accessor: \"first_name\",\n//     Filter: ColumnFilter,\n  },\n  {\n    Header: \"Last Name\",\n    Footer: \"Last Name\",\n    accessor: \"last_name\",\n//     Filter: ColumnFilter,\n  },\n  {\n    Header: \"Date of Birth\",\n    Footer: \"Date of Birth\",\n    accessor: \"date_of_birth\",\n    Cell: ({ value }) => {\n      return format(new Date(value), \"MM/dd/yyyy\");\n    },\n//     Filter: ColumnFilter,\n  },\n  {\n    Header: \"Country\",\n    Footer: \"Country\",\n    accessor: \"country\",\n//     Filter: ColumnFilter,\n  },\n  {\n    Header: \"Phone Number\",\n    Footer: \"Phone Number\",\n    accessor: \"phone\",\n//     Filter: ColumnFilter,\n  },\n];\n\nexport const GROUPED_COLUMNS = [\n  {\n    Header: \"Id\",\n    Footer: \"Id\",\n    accessor: \"id\",\n  },\n  {\n    Header: \"Name\",\n    Footer: \"Name\",\n    columns: [\n      {\n        Header: \"First Name\",\n        Footer: \"First Name\",\n        accessor: \"first_name\",\n      },\n      {\n        Header: \"Last Name\",\n        Footer: \"Last Name\",\n        accessor: \"last_name\",\n      },\n    ],\n  },\n  {\n    Header: \"Info\",\n    Footer: \"Info\",\n    columns: [\n      {\n        Header: \"Date of Birth\",\n        Footer: \"Date of Birth\",\n        accessor: \"date_of_birth\",\n      },\n      {\n        Header: \"Country\",\n        Footer: \"Country\",\n        accessor: \"country\",\n      },\n      {\n        Header: \"Phone Number\",\n        Footer: \"Phone Number\",\n        accessor: \"phone\",\n      },\n    ],\n  },\n];\n","import React, {useState} from 'react';\nimport { useAsyncDebounce } from 'react-table';\n\n\nconst GlobalFilter = ({filter, setFilter}) => {\n    const [value, setValue] = useState(filter);\n    const onChange = useAsyncDebounce(value => {\n        setFilter(value || undefined)\n    }, 1000)\n\n    return ( \n        <span>\n            Search: {''}\n            <input value={value || \"\"}\n            onChange={(e) => \n                {\n                setValue(e.target.value)\n                onChange(e.target.value)\n            }}\n            />\n        </span>\n     );\n}\n \nexport default GlobalFilter;","import React, { useMemo } from \"react\";\nimport { useTable, useGlobalFilter, useFilters} from \"react-table\";\nimport MOCK_DATA from \"./../Data/MOCK_DATA.json\";\nimport { COLUMNS, GROUPED_COLUMNS } from \"./Columns\";\nimport GlobalFilter from './GlobalFilter';\nimport ColumnFilter from \"./ColumnFilter\";\n\n \n\nconst FilteringTable = () => {\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => MOCK_DATA, []);\n  const defaultColumn = useMemo(() => {\n    return {Filter: ColumnFilter}\n  }, []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    footerGroups,\n    rows,\n    prepareRow,\n    state,\n    setGlobalFilter,\n  } = useTable({\n    columns,\n    data,\n    defaultColumn\n  }, useFilters, useGlobalFilter);\n\n  const { globalFilter} = state;\n\n  return (\n      <>\n      <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n    <table {...getTableProps()} id=\"table\">\n      <thead>\n        {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column) => (\n              <th {...column.getHeaderProps()}>{column.render(\"Header\")} \n              <div>{column.canFilter ? column.render('Filter') : null}</div>\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map((cell) => {\n                return <td {...cell.getCellProps()}> {cell.render(\"Cell\")}</td>;\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n      <tfoot>\n        {footerGroups.map((footerGroup) => (\n          <tr {...footerGroup.getFooterGroupProps()}>\n            {footerGroup.headers.map((column) => (\n              <td {...column.getFooterProps}>{column.render(\"Footer\")}</td>\n            ))}\n          </tr>\n        ))}\n      </tfoot>\n    </table>\n  </>\n  );\n};\n\nexport default FilteringTable;\n","import React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport fetchURL from \"./../useQuery/fetchURL\";\nimport BasicTable from './BasicTable';\nimport SortingTable from './SortingTable';\nimport GlobalFilter from './GlobalFilter';\nimport FilteringTable from \"./FilteringTable\";\n\n//https://www.balldontlie.io/#getting-started\n// https://www.balldontlie.io/api/v1/players\n//https://www.balldontlie.io/api/v1/teams\n\nconst Main = () => {\n  const [playersURL, setPlayersURL] = useState(\n    \"https://www.balldontlie.io/api/v1/players\"\n  );\n  const [teamURL, setTeamURL] = useState(\n    \"https://www.balldontlie.io/api/v1/teams\"\n  );\n  const playerList = useQuery([\"players\", `${playersURL}`], fetchURL);\n  const teamList = useQuery([\"teamList\", `${teamURL}`], fetchURL);\n\n  return (\n    <>\n    <FilteringTable />\n    {/* <SortingTable/> */}\n    {/* <BasicTable/> */}\n      {playerList.data && (\n        <div className=\"App-header\">\n          {playerList.data.data.map((playerPlayer, indexPlayer) => (\n            <div key={indexPlayer}>\n              Name: {playerPlayer.first_name} {playerPlayer.last_name}\n            </div>\n          ))}{\" \"}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport \"../Styling/App.scss\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport Main from './Main';\n\n\nimport {ReactQueryDevtools} from 'react-query/devtools';\n\nconst queryClient = new QueryClient();\n\nconst App = () => {\n  return (\n\n    <QueryClientProvider client={queryClient}>\n        <Main />\n      <ReactQueryDevtools initialIsOpen={false} position={'bottom-right'} />\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}