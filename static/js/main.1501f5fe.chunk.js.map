{"version":3,"sources":["Components/useQuery/fetchURL.js","Components/App/ColumnFilter.js","Components/App/GlobalFilter.js","Components/App/Checkbox.js","Components/App/ColumnsFetched.js","Components/App/BasicFetchTable.js","Components/App/Main.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["fetchURL","a","queryKey","id","fetch","res","json","ColumnFilter","column","filterValue","setFilter","value","onChange","e","target","GlobalFilter","filter","useState","setValue","useAsyncDebounce","undefined","Checkbox","React","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","type","COLUMNS","Header","Footer","accessor","Filter","disableFilters","BasicFetchTable","dataSet","columns","useMemo","data","useTable","useGlobalFilter","useRowSelect","hooks","visibleColumns","push","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","footerGroups","rows","prepareRow","selectedFlatRows","setGlobalFilter","globalFilter","state","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","getRowProps","cells","cell","getCellProps","footerGroup","getFooterGroupProps","getFooterProps","JSON","stringify","original","Main","playersURL","teamURL","playerList","useQuery","isLoading","isError","isSuccess","queryClient","QueryClient","App","QueryClientProvider","client","initialIsOpen","position","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1501f5fe.chunk.js","sourcesContent":["const fetchURL = async ({queryKey}) => {\n    const [ , id] = queryKey;\n    const res = await fetch(`${id}`);\n    return res.json();\n  };\n\n  export default fetchURL;","import React from \"react\";\n\nconst ColumnFilter = ({ column }) => {\n  const { filterValue, setFilter } = column;\n  return (\n    <span>\n      Search: {\"\"}\n      <input\n        value={filterValue || \"\"}\n        onChange={(e) => setFilter(e.target.value)}\n      />\n    </span>\n  );\n};\n\nexport default ColumnFilter;\n","import React, {useState} from 'react';\nimport { useAsyncDebounce } from 'react-table';\n\n\nconst GlobalFilter = ({filter, setFilter}) => {\n    const [value, setValue] = useState(filter);\n    const onChange = useAsyncDebounce(value => {\n        setFilter(value || undefined)\n    }, 1000)\n\n    return ( \n        <span>\n            Search: {''}\n            <input value={value || \"\"}\n            onChange={(e) => \n                {\n                setValue(e.target.value)\n                onChange(e.target.value)\n            }}\n            />\n        </span>\n     );\n}\n \nexport default GlobalFilter;","import React from 'react'\n\nexport const Checkbox = React.forwardRef(({indeterminate, ...rest}, ref) =>{\n    const defaultRef = React.useRef()\n    const resolvedRef = ref || defaultRef\n\n    React.useEffect(()=> {\n        resolvedRef.current.indeterminate = indeterminate\n    }, [resolvedRef, indeterminate])\n\n    return(\n        <>\n        <input type='checkbox' ref={resolvedRef} {...rest} />\n        </>\n    )\n});\n\nexport default Checkbox;","import { format } from \"date-fns\";\nimport ColumnFilter from \"./ColumnFilter\";\n\nexport const COLUMNS = [\n  {\n    Header: \"Id\",\n    Footer: \"Id\",\n    accessor: \"id\",\n    Filter: ColumnFilter,\n    disableFilters: true,\n  },\n  {\n    Header: \"First Name\",\n    Footer: \"First Name\",\n    accessor: \"first_name\",\n    Filter: ColumnFilter,\n  },\n  {\n    Header: \"Last Name\",\n    Footer: \"Last Name\",\n    accessor: \"last_name\",\n    Filter: ColumnFilter,\n  },\n  {\n    Header: \"Position\",\n    Footer: \"Position\",\n    accessor: \"position\",\n    Filter: ColumnFilter,\n  },\n\n];\n","import React, { useMemo } from \"react\";\nimport { useTable, useGlobalFilter, useRowSelect } from \"react-table\";\nimport Checkbox from \"./Checkbox\";\nimport { COLUMNS } from \"./ColumnsFetched\";\nimport GlobalFilter from \"./GlobalFilter\";\n\nconst BasicFetchTable = ({ dataSet }) => {\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => dataSet, []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    footerGroups,\n    rows,\n    prepareRow,\n    selectedFlatRows,\n    setGlobalFilter,\n    state,\n  } = useTable(\n    {\n      columns,\n      data,\n    },\n    useGlobalFilter,\n    useRowSelect,\n\n    (hooks) => {\n      hooks.visibleColumns.push((columns) => {\n        return [\n          {\n            id: \"selections\",\n            Header: ({ getToggleAllRowsSelectedProps }) => (\n              <Checkbox {...getToggleAllRowsSelectedProps()} />\n            ),\n            Cell: ({ row }) => (\n              <Checkbox {...row.getToggleRowSelectedProps()} />\n            ),\n          },\n          ...columns,\n        ];\n      });\n    }\n  );\n\n  const { globalFilter } = state;\n\n  return (\n    <>\n      <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\n      <table {...getTableProps()} id=\"table\">\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  return (\n                    <td {...cell.getCellProps()}> {cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n        <tfoot>\n          {footerGroups.map((footerGroup) => (\n            <tr {...footerGroup.getFooterGroupProps()}>\n              {footerGroup.headers.map((column) => (\n                <td {...column.getFooterProps}>{column.render(\"Footer\")}</td>\n              ))}\n            </tr>\n          ))}\n        </tfoot>\n      </table>\n      <pre>\n          <code>\n              {JSON.stringify(\n                  {\n                      selectedFlatRows: selectedFlatRows.map((row)=> row.original),\n                  },\n                  null,\n                  2\n              )}\n          </code>\n      </pre>\n    </>\n  );\n};\n\nexport default BasicFetchTable;\n","import React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport fetchURL from \"./../useQuery/fetchURL\";\nimport BasicTable from './BasicTable';\nimport SortingTable from './SortingTable';\nimport GlobalFilter from './GlobalFilter';\nimport FilteringTable from \"./FilteringTable\";\nimport PaginationTable from \"./PaginationTable\";\nimport RowSelection from \"./RowSelection\";\nimport ColumnOrder from \"./ColumnOrder\";\nimport ColumnHiding from \"./ColumnHiding\";\nimport BasicFetchTable from \"./BasicFetchTable\";\n\n//https://www.balldontlie.io/#getting-started\n// https://www.balldontlie.io/api/v1/players\n//https://www.balldontlie.io/api/v1/teams\n\nconst Main = () => {\n  const [playersURL, setPlayersURL] = useState(\n    \"https://www.balldontlie.io/api/v1/players\"\n  );\n  const [teamURL, setTeamURL] = useState(\n    \"https://www.balldontlie.io/api/v1/teams\"\n  );\n  const playerList = useQuery([\"players\", `${playersURL}`], fetchURL);\n  const teamList = useQuery([\"teamList\", `${teamURL}`], fetchURL);\n\n  return (\n    <>\n    {/* <ColumnHiding /> */}\n    {/* <ColumnOrder/> */}\n    {/* <RowSelection /> */}\n    {/* <PaginationTable/> */}\n    {/* <FilteringTable /> */}\n    {/* <SortingTable/> */}\n    {playerList.isLoading && <div>Loading</div>}\n    {playerList.isError && <div>Uh Oh</div>}\n    {playerList.isSuccess && \n    <BasicFetchTable dataSet={playerList.data.data} />}\n    {/* <BasicTable /> */}\n      {/* {playerList.data && (\n        <div className=\"App-header\">\n          {playerList.data.data.map((playerPlayer, indexPlayer) => (\n            <div key={indexPlayer}>\n              Name: {playerPlayer.first_name} {playerPlayer.last_name}\n            </div>\n          ))}{\" \"}\n        </div>\n      )} */}\n    </>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport \"../Styling/App.scss\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport Main from './Main';\n\n\nimport {ReactQueryDevtools} from 'react-query/devtools';\n\nconst queryClient = new QueryClient();\n\nconst App = () => {\n  return (\n\n    <QueryClientProvider client={queryClient}>\n        <Main />\n      <ReactQueryDevtools initialIsOpen={false} position={'bottom-right'} />\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}